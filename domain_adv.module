<?php
/**
 * @file
 * Implement hooks to change the domain module not to use node access to
 * filter nodes but to use db_rewrite_sql() directly which should make
 * integration with other node access module much easier.
 */

use Drupal\Core\Database\Query\AlterableInterface;

define('DOMAIN_ACCESS_FIELD', 'field_domain_access');
define('DOMAIN_ACCESS_ALL_FIELD', 'field_domain_all_affiliates');

/**
 * Implements hook_module_implements_alter().
 */
function domain_adv_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_grants' || $hook == 'node_access_records') {
    unset($implementations['domain_access']);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_adv_query_node_access_alter(AlterableInterface $query) {
  // Do write the query if the 'domain_adv_no_rewrite' exists
  if ($query->hasTag('domain_adv_no_rewrite')) {
    return;
  }

  /** @var \Drupal\domain\DomainNegotiatorInterface $domain_negotiator */
  $domain_negotiator = \Drupal::service('domain.negotiator');

  if ($domain = $domain_negotiator->getActiveDomain()) {
    /** @var \Drupal\Core\Entity\EntityFieldManager $definition */
    $field_manager = \Drupal::service('entity_field.manager');
    $definitions = $field_manager->getFieldStorageDefinitions('node');

    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
    $table_mapping = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getTableMapping();

    /** @var \Drupal\Core\Database\Query\Condition $condition_group */
    $condition_group = $query->orConditionGroup();

    $tables = $query->getTables();
    $base_table = FALSE;
    foreach ($tables as $alias => $table) {
      if ($table['table'] == 'node_field_data') {
        $base_table = $alias;
        break;
      }
    }

    if (!$base_table) {
      return;
    }

    if (isset($definitions[DOMAIN_ACCESS_FIELD])) {
      /** @var \Drupal\Core\Field\BaseFieldDefinition $definition */
      $definition = $definitions[DOMAIN_ACCESS_FIELD];

      $table_name = $table_mapping->getFieldTableName(DOMAIN_ACCESS_FIELD);
      $query->leftJoin($table_name, DOMAIN_ACCESS_FIELD, $base_table . '.vid = ' . DOMAIN_ACCESS_FIELD . '.revision_id');
      $condition_group->condition(DOMAIN_ACCESS_FIELD . '.' . $definition->getName() . '_target_id', $domain->id());
    }

    if (isset($definitions[DOMAIN_ACCESS_ALL_FIELD])) {
      /** @var \Drupal\Core\Field\BaseFieldDefinition $definition */
      $definition = $definitions[DOMAIN_ACCESS_ALL_FIELD];

      $table_name = $table_mapping->getFieldTableName(DOMAIN_ACCESS_ALL_FIELD);
      $query->leftJoin($table_name, DOMAIN_ACCESS_ALL_FIELD, $base_table . '.vid = ' . DOMAIN_ACCESS_ALL_FIELD . '.revision_id');
      $condition_group->condition(DOMAIN_ACCESS_ALL_FIELD . '.' . $definition->getName() . '_value', 1);
    }

    $query->condition($condition_group);
  }
}

/**
 * Implemenation of hook_menu_alter().
 */
//function domain_adv_menu_alter(&$callbacks) {
//  foreach (array('node/%node', 'node/%node/edit', 'node/%node/delete') as $path) {
//    $callbacks[$path]['access callback'] = 'domain_adv_node_access';
//  }
//}

/**
 * Implementation of hook_db_rewrite_sql().
 */
//function domain_adv_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
//  if (domain_grant_all()) {
//    return;
//  }
//
//  switch ($primary_field) {
//    case 'nid':
//      $return = array();
//      $return['join'] = 'LEFT JOIN {domain_access} da ON '. $primary_table .'.nid = da.nid';
//      $return['where'] = '(da.realm = "domain_id" AND da.gid = '. $GLOBALS['_domain']['domain_id'] .')';
//      if ($GLOBALS['_domain']['domain_id']) {
//        $return['where'].= ' OR (da.realm = "domain_site" AND da.gid = 0)';
//      }
//      return $return;
//      break;
//  }
//}

/**
 * Implementation of hook_domainrecords().
 */
//function domain_adv_domainrecords(&$grants, $node) {
//  _domain_store_grants($node->nid, $grants);
//  $grants = array();
//}

/**
 * Implementation of hook_domaingrants().
 */
//function domain_adv_domaingrants(&$grants, $node, $op) {
//  $grants = array();
//}

/**
 * Implement wrapper function for domain access to check that the node is
 * available in the current domain
 */
//function domain_adv_node_access($op, $node) {
//  if (!empty($node->domains)) {
//    $domain_id = $GLOBALS['_domain']['domain_id'];
//    if ($domain_id == 0) $domain_id = -1;
//    if (!isset($node->domains[$domain_id]) && !$node->domain_site) {
//      return FALSE;
//    }
//  }
//  return node_access($op, $node);
//}

